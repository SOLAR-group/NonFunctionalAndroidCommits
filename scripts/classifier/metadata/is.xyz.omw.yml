Categories:
  - Games
License: GPL-3.0-only
AuthorName: Ilya Zhuravlev
AuthorEmail: omw@xyz.is
WebSite: https://omw.xyz.is/
SourceCode: https://github.com/xyzz/openmw-android
IssueTracker: https://github.com/xyzz/openmw-android/issues
Changelog: https://github.com/xyzz/openmw-android/releases

AutoName: OMW
Description: |-
    Note: This is the "unofficial" version build from @xyzz's repo where the Android app is developed. This means that while new feature will be implemented here first, it might entail a more unstable app. If you want the "official" version build, from the OpenMW Android repo where the releases might follow the main OpenMW release cycle, install https://f-droid.org/packages/com.libopenmw.openmw.

    OpenMW is an open-source, free-software game engine that reimplements the one powering Bethesda Softworks' 2002 open-world role-playing game Morrowind.

    This is an OpenMW port for Android, adapted to be played with touchscreen or remote controller. To play it, you need to use your own, legally acquired Morrowind data files.

RepoType: git
Repo: https://github.com/xyzz/openmw-android.git

Builds:
  - versionName: 0.46.0-17
    versionCode: 17
    commit: 0.46.0-17
    timeout: 40000
    sudo:
      - apt-get update || apt-get update
      - apt-get install -y doxygen g++ pkgconf wget
    gradle:
      - yes
    output: app/build/outputs/apk/release/omw_release_*.apk
    prebuild:
      - sed -i -e '/Unzip/,+5d' buildscripts/include/setup-ndk.sh
      - sed -i -e 's/\ -Wl,-plugin-opt=-emulated-tls//' -e '/download-ndk/d' -e '/debugging\
        life/,+19d' buildscripts/build.sh
      - mkdir -p buildscripts/toolchain
      - ln -s -T $$NDK$$ buildscripts/toolchain/ndk
      - ./buildscripts/build.sh --arch arm
      - ./buildscripts/build.sh --arch arm64 --no-resources
      - ./buildscripts/build.sh --arch x86 --no-resources
      - ./buildscripts/build.sh --arch x86_64 --no-resources
      - rm -fr ./buildscripts/build/*
      - rm -fr ./buildscripts/prefix/*
      - rm -fr ./buildscripts/symbols/*
      - rm -fr ./buildscripts/toolchain/*
    scanignore:
      - app/src/main/assets
      - app/src/main/jniLibs
    ndk: r18b

  - versionName: 0.46.0-18
    versionCode: 18
    commit: 0.46.0-18
    timeout: 40000
    sudo:
      - apt-get update || apt-get update
      - apt-get install -y doxygen g++ pkgconf wget
    gradle:
      - yes
    output: app/build/outputs/apk/release/omw_release_*.apk
    prebuild:
      - sed -i -e '/Unzip/,+5d' buildscripts/include/setup-ndk.sh
      - sed -i -e 's/\ -Wl,-plugin-opt=-emulated-tls//' -e '/download-ndk/d' -e '/debugging\
        life/,+19d' buildscripts/build.sh
      - mkdir -p buildscripts/toolchain
      - ln -s -T $$NDK$$ buildscripts/toolchain/ndk
      - ./buildscripts/build.sh --arch arm
      - ./buildscripts/build.sh --arch arm64 --no-resources
      - ./buildscripts/build.sh --arch x86 --no-resources
      - ./buildscripts/build.sh --arch x86_64 --no-resources
      - rm -fr ./buildscripts/build/*
      - rm -fr ./buildscripts/prefix/*
      - rm -fr ./buildscripts/symbols/*
      - rm -fr ./buildscripts/toolchain/*
    scanignore:
      - app/src/main/assets
      - app/src/main/jniLibs
    ndk: r18b

  - versionName: 0.46.0-37
    versionCode: 37
    commit: 0.46.0-37
    timeout: 30000
    sudo:
      - apt-get update || apt-get update
      - apt-get install -y doxygen g++ pkgconf wget
    gradle:
      - mainline
    output: app/build/outputs/apk/mainline/release/omw_release_*.apk
    prebuild:
      - sed -i -e '/Unzip/,+5d' buildscripts/include/setup-ndk.sh
      - sed -i -e 's/\ -Wl,-plugin-opt=-emulated-tls//' -e '/download-ndk/d' -e '/debugging\
        life/,+19d' buildscripts/build.sh
      - mkdir -p buildscripts/toolchain
      - ln -s -T $$NDK$$ buildscripts/toolchain/ndk
      - ./buildscripts/build.sh --arch arm
      - ./buildscripts/build.sh --arch arm64 --no-resources
      - ./buildscripts/build.sh --arch x86 --no-resources
      - ./buildscripts/build.sh --arch x86_64 --no-resources
      - rm -fr ./buildscripts/build/*
      - rm -fr ./buildscripts/prefix/*
      - rm -fr ./buildscripts/symbols/*
      - rm -fr ./buildscripts/toolchain/*
    scanignore:
      - app/src/main/assets
      - app/src/main/jniLibs
      - buildscripts/downloads/*
    ndk: r20b

  - versionName: 0.46.0-38
    versionCode: 38
    commit: 0.46.0-38
    timeout: 30000
    sudo:
      - apt-get update || apt-get update
      - apt-get install -y doxygen g++ pkgconf wget
    gradle:
      - mainline
    output: app/build/outputs/apk/mainline/release/omw_release_*.apk
    prebuild:
      - sed -i -e '/Unzip/,+5d' buildscripts/include/setup-ndk.sh
      - sed -i -e 's/\ -Wl,-plugin-opt=-emulated-tls//' -e '/download-ndk/d' -e '/debugging\
        life/,+19d' buildscripts/build.sh
      - mkdir -p buildscripts/toolchain
      - ln -s -T $$NDK$$ buildscripts/toolchain/ndk
      - ./buildscripts/build.sh --arch arm
      - ./buildscripts/build.sh --arch arm64 --no-resources
      - ./buildscripts/build.sh --arch x86 --no-resources
      - ./buildscripts/build.sh --arch x86_64 --no-resources
      - rm -fr ./buildscripts/build/*
      - rm -fr ./buildscripts/prefix/*
      - rm -fr ./buildscripts/symbols/*
      - rm -fr ./buildscripts/toolchain/*
    scanignore:
      - app/src/main/assets
      - app/src/main/jniLibs
      - buildscripts/downloads/*
    ndk: r20b

MaintainerNotes: |-
    - we use prebuild else fdroid scanner will detect the built libs as binaries on the second pass before running build, and we can't scanignore them (at start) since they don't exist yet, see https://gitlab.com/fdroid/fdroidserver/issues/635
    - we remove the buildtools and intermediary artefacts (several gigabytes) else they'll get pulled in the source tarball

AutoUpdateMode: Version %v
UpdateCheckMode: Tags .*[0-9]$
CurrentVersion: 0.46.0-38
CurrentVersionCode: 38
